# Author: Vladimir Vysokomornyi

name: Rotate access and refresh tokens

on:
  # Runs every day at 0:00 AM UTC
  schedule:
    - cron: '0 0 * * *'

  workflow_dispatch:

jobs:
  update_tokens:
    name: Update access and refresh tokens
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

#      - name: Get and save Public Key
#        id: getPublicKeyId
#        run: |
#          public_key_info=$(curl -X GET \
#            -H "Accept: application/vnd.github+json" \
#            -H "Authorization: Bearer $ACCESS_TOKEN" \
#            -H "X-GitHub-Api-Version: 2022-11-28" \
#            https://api.github.com/repos/unlimit1984/home-expenses/actions/secrets/public-key)
#
#          keyId=$(echo "$public_key_info" | jq -r '.key_id')
#          echo "::add-mask::$keyId"
#          echo repoKeyId="$keyId" >> $GITHUB_OUTPUT
#
#          key=$(echo "$public_key_info" | jq -r '.key')
#          echo "::add-mask::$key"
#          echo repoKey="$key" >> $GITHUB_OUTPUT
#        env:
#          ACCESS_TOKEN: ${{ secrets.GH_PAT_SECRETS }}
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 20
#
#      - name: Generate secret
#        run: |
#          secretValue=$(node ./code/js_files/generate_secret_value.js)
#          echo "::add-mask::$secretValue"
#          echo secretValue=$secretValue >> $GITHUB_ENV
#
#      - name: Encrypt new secret via libsodium lib
#        run: |
#          npm i libsodium-wrappers
#          encryptedSecretValue=$(node ./code/js_files/get_encrypted_secret.js ${{ env.secretValue}} ${{ steps.getPublicKeyId.outputs.repoKey }})
#          echo "::add-mask::$encryptedSecretValue"
#          echo encryptedSecretValue=$encryptedSecretValue >> $GITHUB_ENV
#
#      - name: Update Secret
#        run: |
#          curl -X PUT \
#            -H 'Authorization: Bearer ${{ secrets.GH_PAT_SECRETS }}' \
#            -H 'X-GitHub-Api-Version: 2022-11-28' \
#            -H 'Accept: application/vnd.github+json' \
#            -d '{"encrypted_value":"${{ env.encryptedSecretValue}}","key_id":"${{ steps.getPublicKeyId.outputs.repoKeyId }}"}' \
#            https://api.github.com/repos/unlimit1984/home-expenses/actions/secrets/AUTH_AT_SECRET
#          curl -X PUT \
#            -H 'Authorization: Bearer ${{ secrets.GH_PAT_SECRETS }}' \
#            -H 'X-GitHub-Api-Version: 2022-11-28' \
#            -H 'Accept: application/vnd.github+json' \
#            -d '{"encrypted_value":"${{ env.encryptedSecretValue}}","key_id":"${{ steps.getPublicKeyId.outputs.repoKeyId }}"}' \
#            https://api.github.com/repos/unlimit1984/home-expenses/actions/secrets/AUTH_RT_SECRET

      - name: Generate New Secrets
        id: generatedSecrets
        run: |
          echo "===Generate a new secret for access token==="
          atSecret=$(openssl rand -hex 64)
          echo "::add-mask::$atSecret"
          echo atSecret=$atSecret >> $GITHUB_OUTPUT
          echo "===Generate a new secret for refresh token==="
          rtSecret=$(openssl rand -hex 64)
          echo "::add-mask::$rtSecret"
          echo rtSecret=$rtSecret >> $GITHUB_OUTPUT
        shell: bash

      - name: Update Railway Environment Variable - AT token secret
        run: |
          curl --location 'https://backboard.railway.app/graphql/v2' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ secrets.RAILWAY_API_TOKEN }}' \
          --data '{
            "query": "mutation variableUpsert($input: VariableUpsertInput!) { variableUpsert(input: $input) }",
            "variables": {
              "input": {
                "environmentId": "${{ vars.RAILWAY_ENVIRONMENT_ID }}",
                "projectId": "${{ vars.RAILWAY_PROJECT_ID }}",
                "serviceId": "${{ vars.RAILWAY_SERVICE_ID }}",
                "name": "AUTH_AT_SECRET",
                "value": "${{ steps.generatedSecrets.outputs.atSecret }}"
              }
            }
          }'
        shell: bash

      - name: Update Railway Environment Variable - RT token secret
        run: |
          curl --location 'https://backboard.railway.app/graphql/v2' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ secrets.RAILWAY_API_TOKEN }}' \
          --data '{
            "query": "mutation variableUpsert($input: VariableUpsertInput!) { variableUpsert(input: $input) }",
            "variables": {
              "input": {
                "environmentId": "${{ vars.RAILWAY_ENVIRONMENT_ID }}",
                "projectId": "${{ vars.RAILWAY_PROJECT_ID }}",
                "serviceId": "${{ vars.RAILWAY_SERVICE_ID }}",
                "name": "AUTH_RT_SECRET",
                "value": "${{ steps.generatedSecrets.outputs.rtSecret }}"
              }
            }
          }'
        shell: bash

      - name: Install Railway
        run: npm i -g @railway/cli

      - name: Redeploy api
        run: |
          railway up --service home-expenses
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}